---
title: "HW4"
author: "Yufan Li"
format: 
  html:
    embed-resources: true
editor: visual
---

## Homework 4

Github Repo Link: <https://github.com/YufanLi2002/STATS506.git>

### Problem 1 - Tidyverse

Use the **tidyverse** for this problem. In particular, use piping and **dplyr** as much as you are able. **Note**: Use of any deprecated functions will result in a point loss.

Install and load the package [**nycflights13**](https://cran.r-project.org/package=nycflights13).

a\. Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

Additionally,

-   Order both tables in descending mean delay.

-   Both tables should use the airport *names* not the airport *codes*.

-   Both tables should print all rows.

```{r}
setwd("~/Documents/GitHub/STATS506/HW4")
# install.packages("nycflights13")
## load all necessary packages and data sets 
library(tidyverse)
library(dplyr)
library(nycflights13)
data(flights)
data(airports)

# Generate the first table with mean and median departure delay, using airport names
table1 <- flights %>% 
  group_by(origin) %>% 
  filter(n() >= 10 & !is.na(dep_delay)) %>%
  summarise(
    mean_dep_delay = mean(dep_delay),
    median_dep_delay = median(dep_delay)
  ) %>%
  inner_join(airports, by = c("origin" = "faa")) %>%  # Join to get airport names
  select(name, mean_dep_delay, median_dep_delay) %>% # Select only relevant columns
  arrange(desc(mean_dep_delay)) %>%
  rename(airport = name) %>%  # Rename 'name' to 'airport'
  print(n = Inf)

```

```{r}
table2 <- flights %>% 
  group_by(dest) %>% 
  filter(n() >= 10 & !is.na(arr_delay)) %>%
  summarise(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    median_arr_delay = median(arr_delay, na.rm = TRUE)
  ) %>%
  inner_join(airports, by = c("dest" = "faa")) %>%  # Join to get airport names
  select(name, mean_arr_delay, median_arr_delay) %>% # Select only relevant columns
  arrange(desc(mean_arr_delay)) %>%
  rename(airport = name) %>%  # Rename 'name' to 'airport'
  print(n = Inf)

```

b\. How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.

```{r}
data(planes)
data(airlines)

# Calculate speed (in MPH) and find the aircraft model with the fastest average speed
fastest_aircraft <- flights %>%
  filter(!is.na(distance), !is.na(air_time), air_time > 0) %>% 
  # Filter out rows with missing or zero air_time
  mutate(speed_mph = distance / (air_time / 60)) %>%           
  # Calculate speed in MPH
  inner_join(planes, by = "tailnum") %>%                       
  # Join with planes to get model info
  group_by(model) %>%                                           
  # Group by model
  summarise(
    avg_speed_mph = mean(speed_mph, na.rm = TRUE),
    num_flights = n()
  ) %>%
  arrange(desc(avg_speed_mph)) %>%                             
  # Arrange by average speed in descending order
  slice(1) %>%                                                 
  # Select the fastest aircraft model
  as_tibble()                                                 
  # Convert to tibble for a nicer output

fastest_aircraft

```

### Problem 2 - get_temp()

Use the **tidyverse** for this problem. In particular, use piping and **dplyr** as much as you are able. **Note**: Use of any deprecated functions will result in a point loss.

Load the Chicago NNMAPS data we used in the visualization lectures. Write a function `get_temp()` that allows a user to request the average temperature for a given month. The arguments should be:

-   `month`: Month, either a numeric 1-12 or a string.

-   `year`: A numeric year.

-   `data`: The data set to obtain data from.

-   `celsius`: Logically indicating whther the results should be in celsius. Default `FALSE`.

-   `average_fn`: A function with which to compute the mean. Default is `mean`.

The output should be a numeric vector of length 1. The code inside the function should, as with the rest of this problem, use the **tidyverse**. Be sure to sanitize the input.

Prove your code works by evaluating the following. Your code should produce the result, or a reasonable error message.

```{r}
nnmaps <- read.csv("chicago-nmmaps.csv")

get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
  # Sanitize year input
  if (!is.numeric(year) || year < 1900 || year > 2100) {
    stop("Invalid year. Please provide a numeric year between 1900 and 2100.")
  }
  
  # Check if month is character (abbreviation) or numeric, and filter accordingly
  if (is.character(month)) {
    # Standardize input to match title case format in data
    month <- tolower(month)
    if (!(month %in% tolower(month.abb))) {
      stop("Invalid month abbreviation. Please provide a valid three-letter month abbreviation or a numeric value between 1 and 12.")
    }
    month <- tools::toTitleCase(month)  # Converts 'apr' or 'APR' to 'Apr'
    temp_data <- data %>% filter(year == year, month == month)
    
  } else if (is.numeric(month) && month >= 1 && month <= 12) {
    # Use numeric month in "month_numeric" column
    temp_data <- data %>% filter(year == year, month_numeric == month)
    
  } else {
    stop("Invalid month. Please provide a numeric month value between 1 and 12 or a valid three-letter abbreviation.")
  }
  
  
  # Check if data exists for the specified year and month
  if (nrow(temp_data) == 0) {
    stop("No data available for the specified month and year.")
  }
  
  # Validate average_fn
  if (!identical(average_fn, mean) && !is.function(average_fn)) {
    stop("Invalid average_fn. Please provide a valid function to calculate the average (default is 'mean').")
  }
  
  
  # Calculate average temperature using the specified function
  avg_temp <- tryCatch({
    average_fn(temp_data$temp, na.rm = TRUE)
  }, error = function(e) {
    stop("Error in calculating average: please ensure `average_fn` is a valid function.")
  })
  
  # Convert to Celsius if needed
  if (celsius) {
    avg_temp <- (avg_temp - 32) * 5 / 9
  }
  
  return(avg_temp)
}
  


# # Example usage (use your data frame as nnmaps):
# get_temp("Apr", 1999, data = nnmaps)
# get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
# get_temp(10, 1998, data = nnmaps, average_fn = median)
# get_temp(13, 1998, data = nnmaps)   # Should return an error for invalid month
# get_temp(2, 2005, data = nnmaps)    # Should return an error if data for 2005 is unavailable
# get_temp("November", 1999, data = nnmaps, celsius = TRUE, average_fn = function(x) {
#   x %>% sort -> x
#   x[2:(length(x) - 1)] %>% mean %>% return
# })
# 

```

\

```{r}
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean, ...) {
  # Sanitize year input
  if (!is.numeric(year) || year < 1900 || year > 2100) {
    stop("Invalid year. Please provide a numeric year between 1900 and 2100.")
  }
  
  # Check if month is character (abbreviation) or numeric, and filter accordingly
  if (is.character(month)) {
    # Standardize input to match title case format in data
    month <- tolower(month)
    if (!(month %in% tolower(month.abb))) {
      stop("Invalid month abbreviation. Please provide a valid three-letter month abbreviation or a numeric value between 1 and 12.")
    }
    month <- tools::toTitleCase(month)  # Converts 'november' or 'NOV' to 'Nov'
    temp_data <- data %>% filter(year == year, month == month)
    
  } else if (is.numeric(month) && month >= 1 && month <= 12) {
    # Use numeric month in "month_numeric" column
    temp_data <- data %>% filter(year == year, month_numeric == month)
    
  } else {
    stop("Invalid month. Please provide a numeric month value between 1 and 12 or a valid three-letter abbreviation.")
  }
  
  # Check if data exists for the specified year and month
  if (nrow(temp_data) == 0) {
    stop("No data available for the specified month and year.")
  }
  
  # Validate average_fn - allow custom functions
  if (!is.function(average_fn)) {
    stop("Invalid average_fn. Please provide a valid function to calculate the average (default is 'mean').")
  }
  
  # Calculate average temperature using the specified function
  avg_temp <- tryCatch({
    average_fn(temp_data$temp, na.rm = TRUE, ...)  # Pass additional arguments to the average function
  }, error = function(e) {
    stop("Error in calculating average: please ensure `average_fn` is a valid function.")
  })
  
  # Convert to Celsius if needed
  if (celsius) {
    avg_temp <- (avg_temp - 32) * 5 / 9
  }
  
  return(avg_temp)
}

```

### Problem 3 - Visualization 

Note: This is, intentionally, a very open-ended question. There is no “right” answer. The goal is for you to explore your plotting options, and settle on something reasonable. You can use base R, ggplot, or soemthing else. You’ll likely have to look online for resources on plotting beyond what we covered in class.

This dataset lists characteristics of [art sales](https://springernature.figshare.com/articles/dataset/Buying_a_Work_of_Art_or_an_Artist_Exploring_the_Impact_of_Visual_and_Social_Features_on_Art_Prices/24746268?file=43477980). Download the file named “df_for_ml_improved_new_market” (NOT the “df_for_ml_improved_new_market_1” version!). For each of the following, produce a publication-ready plot which demonstrates the answer to the question. Use your plot to support an argument for your question.

a.  Is there a change in the sales price in USD over time?

b.  Does the distribution of genre of sales across years appear to change?

c.  How does the genre affect the change in sales price over time?

You will be graded on:

i.  Is the type of graph & choice of variables appropriate to answer the question?

ii. Is the graph clear and easy to interpret?

iii. Is the graph publication ready?

part (a)

```{r}
artSale <- read.csv("df_for_ml_improved_new_market.csv")

library(ggplot2)
library(dplyr)

# Assuming 'artSale' is your dataset
avg_price_over_time <- artSale %>%
  group_by(year) %>%
  summarize(avg_price = mean(price_usd, na.rm = TRUE))

ggplot(avg_price_over_time, aes(x = year, y = avg_price)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "blue", size = 2) +
  labs(title = "Average Sales Price Over Time",
       x = "Year",
       y = "Average Sales Price (USD)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```

Part (b)

```{r}
# Reshape data to get genre counts per year
genre_distribution <- artSale %>%
  tidyr::pivot_longer(
    cols = c(Genre___Photography, Genre___Print, Genre___Sculpture, Genre___Painting, Genre___Others),
    names_to = "Genre",
    values_to = "IsGenre"
  ) %>%
  filter(IsGenre == 1) %>%
  mutate(Genre = gsub("Genre___", "", Genre)) %>%
  group_by(year, Genre) %>%
  summarize(count = n(), .groups = 'drop')

# Faceted bar plot with uniform y-axis tick marks across genres
ggplot(genre_distribution, aes(x = year, y = count, fill = Genre)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ Genre) +  # Uniform y-axis scale across all facets
  scale_fill_brewer(palette = "Set2") +  # Distinct colors for each genre
  labs(title = "Distribution of Art Sales by Genre Across Years",
       x = "Year",
       y = "Count of Sales") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text = element_text(size = 10, face = "bold"),  # Enhances readability of genre labels
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotates x-axis labels for better readability
  ) +
  guides(fill = "none")  # Removes legend since each facet represents a different genre

```

```{r, fig.width=15, fig.height=12}
# Data processing
genre_distribution <- artSale %>%
  tidyr::pivot_longer(
    cols = c(Genre___Photography, Genre___Print, Genre___Sculpture, Genre___Painting, Genre___Others),
    names_to = "Genre",
    values_to = "IsGenre"
  ) %>%
  filter(IsGenre == 1) %>%
  mutate(Genre = gsub("Genre___", "", Genre)) %>%
  group_by(year, Genre) %>%
  summarize(count = n(), .groups = 'drop') %>%
  group_by(year) %>%
  mutate(total_sales_year = sum(count), 
         proportion = count / total_sales_year) %>%
  ungroup()

# Create visualization with trend lines
ggplot(genre_distribution, aes(x = Genre, y = proportion)) +
  # Bars with slightly reduced alpha to make trend line visible
  geom_bar(aes(fill = Genre), stat = "identity", width = 0.7, alpha = 0.8) +
  # Add smooth trend line per year
  geom_smooth(aes(group = Genre, color = Genre), method = "loess", se = FALSE, size = 1) +
  # Add labels for actual proportions above the bars
  geom_text(aes(label = scales::percent(proportion, accuracy = 1)), 
             vjust = -0.1,  # Adjust vertical position higher
             hjust = 0.5,   # Center the text horizontally
             size = 4,      # Adjust font size
             fill = "white", # Background fill for the label
             color = "black") +  # Text color
  facet_wrap(~ year, scales = "fixed") +  # Use "fixed" for consistent y-axis
  scale_fill_manual(values = c("#FF9999", "#66B2FF", "#99FF99", "#FFCC99", "#FF99CC")) +
  labs(title = "Distribution of Art Sales by Genre",
       x = "Genre",
       y = "Proportion of Sales") +
  theme_grey(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold", margin = margin(b = 20)),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14, face = "bold"),
    axis.text.y = element_text(size = 14),
    axis.title.y = element_text(size = 18, face = "bold", margin = margin(r = 10)),
    strip.text = element_text(size = 16, face = "bold"),
    strip.background = element_rect(fill = "grey80"),
    panel.spacing = unit(2, "lines"),
    panel.grid.major = element_line(color = "grey90", size = 0.5),
    panel.grid.minor = element_line(color = "grey95", size = 0.25),
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "grey95"),
    legend.position = "none",
    plot.margin = margin(40, 20, 20, 20)
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1),
                     breaks = seq(0, 1, by = 0.2))  # Set consistent breaks



```

Part (c)

```{r}
# Calculate the average sales price by genre and year
genre_price_trends <- artSale %>%
  tidyr::pivot_longer(
    cols = c(Genre___Photography, Genre___Print, Genre___Sculpture, Genre___Painting, Genre___Others),
    names_to = "Genre",
    values_to = "IsGenre"
  ) %>%
  filter(IsGenre == 1) %>%
  mutate(Genre = gsub("Genre___", "", Genre)) %>%
  group_by(year, Genre) %>%
  summarize(avg_price = mean(price_usd, na.rm = TRUE), .groups = 'drop')

# Plot average sales price by genre over time
ggplot(genre_price_trends, aes(x = year, y = avg_price, color = Genre)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(title = "Average Sales Price by Genre Over Time",
       x = "Year",
       y = "Average Sales Price (USD)",
       color = "Genre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))


```
